// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    role: 'buyer',
    beats: [],
    myBeats: [],
    favorites: [],
    purchases: [],
    balance: 100, // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ Stars
    currentBeat: null,
    isPlaying: false,
    currentSection: 'discover' // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    roleBtns: document.querySelectorAll('.role-btn'),
    buyerSection: document.querySelector('.buyer-section'),
    sellerSection: document.querySelector('.seller-section'),
    beatsGrid: document.getElementById('beatsGrid'),
    uploadModal: document.getElementById('uploadModal'),
    uploadForm: document.getElementById('uploadForm'),
    cancelUpload: document.getElementById('cancelUpload'),
    uploadBeatBtn: document.getElementById('uploadBeatBtn'),
    playerModal: document.getElementById('playerModal'),
    audioPlayer: document.getElementById('audioPlayer'),
    playPauseBtn: document.getElementById('playPauseBtn'),
    progressBar: document.getElementById('progressBar'),
    currentTime: document.getElementById('currentTime'),
    duration: document.getElementById('duration'),
    closePlayer: document.getElementById('closePlayer'),
    favoriteBtn: document.getElementById('favoriteBtn'),
    buyBtn: document.getElementById('buyBtn'),
    beatPriceDisplay: document.getElementById('beatPriceDisplay'),
    playerTitle: document.getElementById('playerTitle'),
    playerInfo: document.getElementById('playerInfo'),
    beatCover: document.getElementById('beatCover'),
    userBalance: document.getElementById('userBalance'),
    totalSales: document.getElementById('totalSales'),
    totalEarned: document.getElementById('totalEarned'),
    myBeatsList: document.getElementById('myBeatsList'),
    searchInput: document.getElementById('searchInput'),
    genreFilter: document.getElementById('genreFilter'),
    bpmFilter: document.getElementById('bpmFilter'),
    navBtns: document.querySelectorAll('.nav-btn'),
    discoverSection: document.querySelector('.buyer-section'),
    favoritesSection: document.createElement('div'),
    purchasesSection: document.createElement('div'),
    profileSection: document.createElement('div')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function init() {
    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    createAdditionalSections();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadMockData();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    loadUserData();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
function createAdditionalSections() {
    // –°–µ–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    elements.favoritesSection.className = 'favorites-section';
    elements.favoritesSection.innerHTML = `
        <h2>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</h2>
        <div class="favorites-grid" id="favoritesGrid"></div>
    `;
    elements.buyerSection.parentNode.appendChild(elements.favoritesSection);
    
    // –°–µ–∫—Ü–∏—è –ø–æ–∫—É–ø–æ–∫
    elements.purchasesSection.className = 'purchases-section';
    elements.purchasesSection.innerHTML = `
        <h2>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</h2>
        <div class="purchases-grid" id="purchasesGrid"></div>
    `;
    elements.buyerSection.parentNode.appendChild(elements.purchasesSection);
    
    // –°–µ–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    elements.profileSection.className = 'profile-section';
    elements.profileSection.innerHTML = `
        <h2>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
        <div class="profile-info" id="profileInfo"></div>
        <button class="logout-btn" id="logoutBtn">–í—ã–π—Ç–∏</button>
    `;
    elements.buyerSection.parentNode.appendChild(elements.profileSection);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadMockData() {
    state.beats = [
        {
            id: '1',
            title: 'Dark Trap Beat',
            genre: 'trap',
            bpm: 140,
            price: 50, // –¶–µ–Ω–∞ –≤ Stars
            cover: 'https://example.com/cover1.jpg',
            audio: 'https://example.com/beat1.mp3',
            artist: 'prod.by.night',
            duration: 180,
            uploadDate: '2025-05-10'
        },
        {
            id: '2',
            title: 'Melodic Drill',
            genre: 'drill',
            bpm: 150,
            price: 75, // –¶–µ–Ω–∞ –≤ Stars
            cover: 'https://example.com/cover2.jpg',
            audio: 'https://example.com/beat2.mp3',
            artist: 'icybeats',
            duration: 210,
            uploadDate: '2025-05-08'
        }
    ];
    
    state.myBeats = [
        {
            id: '5',
            title: 'My First Beat',
            genre: 'trap',
            bpm: 140,
            price: 40,
            cover: 'https://example.com/mycover1.jpg',
            audio: 'https://example.com/mybeat1.mp3',
            artist: tg.initDataUnsafe.user?.username || 'You',
            duration: 185,
            uploadDate: '2025-04-28',
            sales: 3,
            earned: 120 // –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Stars
        }
    ];
    
    state.favorites = ['1', '3'];
    state.purchases = ['2'];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
function loadUserData() {
    if (tg.initDataUnsafe?.user) {
        const user = tg.initDataUnsafe.user;
        console.log('User data:', user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        updateProfileSection(user);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileSection(user) {
    const profileInfo = `
        <div class="profile-card">
            <div class="profile-avatar">
                ${user.photo_url ? `<img src="${user.photo_url}" alt="${user.first_name}">` : 'üë§'}
            </div>
            <div class="profile-details">
                <h3>${user.first_name} ${user.last_name || ''}</h3>
                ${user.username ? `<p>@${user.username}</p>` : ''}
                <p>–ë–∞–ª–∞–Ω—Å: ${state.balance} Stars</p>
            </div>
        </div>
        <div class="profile-stats">
            <div class="stat-item">
                <span>${state.favorites.length}</span>
                <span>–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º</span>
            </div>
            <div class="stat-item">
                <span>${state.purchases.length}</span>
                <span>–ü–æ–∫—É–ø–æ–∫</span>
            </div>
        </div>
    `;
    
    document.getElementById('profileInfo').innerHTML = profileInfo;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è/–ø—Ä–æ–¥–∞–≤—Ü–∞
    elements.roleBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            state.role = btn.dataset.role;
            updateUI();
        });
    });
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–∞
    elements.uploadBeatBtn.addEventListener('click', () => {
        elements.uploadModal.classList.add('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–∞
    elements.cancelUpload.addEventListener('click', () => {
        elements.uploadModal.classList.remove('active');
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–∞
    elements.uploadForm.addEventListener('submit', (e) => {
        e.preventDefault();
        uploadNewBeat();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞
    elements.closePlayer.addEventListener('click', closePlayer);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    elements.playPauseBtn.addEventListener('click', togglePlayPause);
    elements.audioPlayer.addEventListener('play', () => {
        state.isPlaying = true;
        updatePlayPauseButton();
    });
    elements.audioPlayer.addEventListener('pause', () => {
        state.isPlaying = false;
        updatePlayPauseButton();
    });
    elements.audioPlayer.addEventListener('timeupdate', updateProgressBar);
    elements.progressBar.addEventListener('input', seekAudio);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    elements.favoriteBtn.addEventListener('click', toggleFavorite);
    
    // –ü–æ–∫—É–ø–∫–∞ –±–∏—Ç–∞
    elements.buyBtn.addEventListener('click', purchaseBeat);
    
    // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    elements.searchInput.addEventListener('input', filterBeats);
    elements.genreFilter.addEventListener('change', filterBeats);
    elements.bpmFilter.addEventListener('change', filterBeats);

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
    elements.navBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            state.currentSection = btn.dataset.section;
            updateUI();
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    document.getElementById('logoutBtn')?.addEventListener('click', () => {
        tg.close();
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
    elements.buyerSection.classList.toggle('active', state.role === 'buyer');
    elements.sellerSection.classList.toggle('active', state.role === 'seller');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–æ–ª–µ–π
    elements.roleBtns.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.role === state.role);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    elements.navBtns.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.section === state.currentSection);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é
    elements.discoverSection.style.display = state.currentSection === 'discover' ? 'block' : 'none';
    elements.favoritesSection.style.display = state.currentSection === 'favorites' ? 'block' : 'none';
    elements.purchasesSection.style.display = state.currentSection === 'purchases' ? 'block' : 'none';
    elements.profileSection.style.display = state.currentSection === 'profile' ? 'block' : 'none';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (state.role === 'buyer') {
        switch(state.currentSection) {
            case 'discover':
                renderBeatsGrid();
                break;
            case 'favorites':
                renderFavorites();
                break;
            case 'purchases':
                renderPurchases();
                break;
            case 'profile':
                if (tg.initDataUnsafe?.user) {
                    updateProfileSection(tg.initDataUnsafe.user);
                }
                break;
        }
    } else {
        renderMyBeats();
        updateSellerStats();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    elements.userBalance.textContent = `${state.balance} Stars`;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
function renderFavorites() {
    const favoritesGrid = document.getElementById('favoritesGrid');
    favoritesGrid.innerHTML = '';
    
    if (state.favorites.length === 0) {
        favoritesGrid.innerHTML = '<p class="empty-message">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤</p>';
        return;
    }
    
    state.favorites.forEach(beatId => {
        const beat = state.beats.find(b => b.id === beatId);
        if (beat) {
            const beatCard = createBeatCard(beat);
            favoritesGrid.appendChild(beatCard);
        }
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–∫—É–ø–æ–∫
function renderPurchases() {
    const purchasesGrid = document.getElementById('purchasesGrid');
    purchasesGrid.innerHTML = '';
    
    if (state.purchases.length === 0) {
        purchasesGrid.innerHTML = '<p class="empty-message">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫</p>';
        return;
    }
    
    state.purchases.forEach(beatId => {
        const beat = state.beats.find(b => b.id === beatId);
        if (beat) {
            const beatCard = createBeatCard(beat);
            purchasesGrid.appendChild(beatCard);
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–∏—Ç–∞
function createBeatCard(beat) {
    const isFavorite = state.favorites.includes(beat.id);
    const isPurchased = state.purchases.includes(beat.id);
    
    const beatCard = document.createElement('div');
    beatCard.className = 'beat-card';
    beatCard.dataset.id = beat.id;
    beatCard.innerHTML = `
        <div class="beat-cover">
            ${beat.cover ? `<img src="${beat.cover}" alt="${beat.title}">` : ''}
            <div class="play-icon">‚ñ∂Ô∏è</div>
        </div>
        <div class="beat-info">
            <div class="beat-title">${beat.title}</div>
            <div class="beat-meta">
                <span>${beat.artist}</span>
                <span>${beat.price} Stars</span>
            </div>
        </div>
    `;
    
    beatCard.addEventListener('click', () => openPlayer(beat));
    return beatCard;
}

// –ü–æ–∫—É–ø–∫–∞ –±–∏—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
function purchaseBeat() {
    if (!state.currentBeat) return;
    
    if (state.purchases.includes(state.currentBeat.id)) {
        tg.showAlert('–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –±–∏—Ç');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (state.balance < state.currentBeat.price) {
        tg.showPopup({
            title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars',
            message: `–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${state.currentBeat.price}`,
            buttons: [{
                id: 'topup',
                type: 'default',
                text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'
            }, {
                id: 'cancel',
                type: 'cancel',
                text: '–û—Ç–º–µ–Ω–∞'
            }]
        }, (buttonId) => {
            if (buttonId === 'topup') {
                tg.openInvoice({
                    currency: 'STARS',
                    amount: state.currentBeat.price * 2, // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                    description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Stars'
                }, (status) => {
                    if (status === 'paid') {
                        state.balance += state.currentBeat.price * 2;
                        updateUI();
                        tg.showAlert('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!');
                    }
                });
            }
        });
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    tg.showPopup({
        title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',
        message: `–ö—É–ø–∏—Ç—å "${state.currentBeat.title}" –∑–∞ ${state.currentBeat.price} Stars?`,
        buttons: [{
            id: 'confirm',
            type: 'destructive',
            text: '–ö—É–ø–∏—Ç—å'
        }, {
            id: 'cancel',
            type: 'cancel',
            text: '–û—Ç–º–µ–Ω–∞'
        }]
    }, (buttonId) => {
        if (buttonId === 'confirm') {
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stars
            tg.openInvoice({
                currency: 'STARS',
                amount: state.currentBeat.price,
                description: `–ü–æ–∫—É–ø–∫–∞ –±–∏—Ç–∞ "${state.currentBeat.title}"`
            }, (status) => {
                if (status === 'paid') {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    state.purchases.push(state.currentBeat.id);
                    state.balance -= state.currentBeat.price;
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                    updateUI();
                    updatePurchaseButton();
                    
                    tg.showAlert('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª—É—à–∞—Ç—å —ç—Ç–æ—Ç –±–∏—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.');
                } else {
                    tg.showAlert('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
                }
            });
        }
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ç–∫–∏ –±–∏—Ç–æ–≤
function renderBeatsGrid() {
    elements.beatsGrid.innerHTML = '';
    
    state.beats.forEach(beat => {
        const isFavorite = state.favorites.includes(beat.id);
        const isPurchased = state.purchases.includes(beat.id);
        
        const beatCard = document.createElement('div');
        beatCard.className = 'beat-card';
        beatCard.dataset.id = beat.id;
        beatCard.innerHTML = `
            <div class="beat-cover">
                ${beat.cover ? `<img src="${beat.cover}" alt="${beat.title}">` : ''}
                <div class="play-icon">‚ñ∂Ô∏è</div>
            </div>
            <div class="beat-info">
                <div class="beat-title">${beat.title}</div>
                <div class="beat-meta">
                    <span>${beat.artist}</span>
                    <span>${beat.price} TON</span>
                </div>
            </div>
        `;
        
        beatCard.addEventListener('click', () => openPlayer(beat));
        elements.beatsGrid.appendChild(beatCard);
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –±–∏—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
function renderMyBeats() {
    if (state.myBeats.length === 0) {
        elements.myBeatsList.innerHTML = `
            <div class="empty-state">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤</p>
            </div>
        `;
        return;
    }
    
    elements.myBeatsList.innerHTML = '';
    
    state.myBeats.forEach(beat => {
        const beatItem = document.createElement('div');
        beatItem.className = 'beat-card';
        beatItem.innerHTML = `
            <div class="beat-cover">
                ${beat.cover ? `<img src="${beat.cover}" alt="${beat.title}">` : ''}
            </div>
            <div class="beat-info">
                <div class="beat-title">${beat.title}</div>
                <div class="beat-meta">
                    <span>${beat.sales || 0} –ø—Ä–æ–¥–∞–∂</span>
                    <span>${beat.earned || 0} TON</span>
                </div>
            </div>
        `;
        
        elements.myBeatsList.appendChild(beatItem);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
function updateSellerStats() {
    const totalSales = state.myBeats.reduce((sum, beat) => sum + (beat.sales || 0), 0);
    const totalEarned = state.myBeats.reduce((sum, beat) => sum + (beat.earned || 0), 0);
    
    elements.totalSales.textContent = totalSales;
    elements.totalEarned.textContent = totalEarned.toFixed(2);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∏—Ç–æ–≤
function filterBeats() {
    const searchTerm = elements.searchInput.value.toLowerCase();
    const genreFilter = elements.genreFilter.value;
    const bpmFilter = elements.bpmFilter.value;
    
    const filteredBeats = state.beats.filter(beat => {
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        const matchesSearch = beat.title.toLowerCase().includes(searchTerm) || 
                            beat.artist.toLowerCase().includes(searchTerm);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É
        const matchesGenre = !genreFilter || beat.genre === genreFilter;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ BPM
        let matchesBpm = true;
        if (bpmFilter) {
            const [min, max] = bpmFilter.split('-').map(Number);
            if (max) {
                matchesBpm = beat.bpm >= min && beat.bpm <= max;
            } else {
                matchesBpm = beat.bpm >= min;
            }
        }
        
        return matchesSearch && matchesGenre && matchesBpm;
    });
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const originalBeats = [...state.beats];
    state.beats = filteredBeats;
    renderBeatsGrid();
    state.beats = originalBeats;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞
function openPlayer(beat) {
    state.currentBeat = beat;
    
    elements.playerTitle.textContent = beat.title;
    elements.playerInfo.textContent = `–ñ–∞–Ω—Ä: ${getGenreName(beat.genre)} ‚Ä¢ BPM: ${beat.bpm}`;
    elements.beatPriceDisplay.textContent = beat.price.toFixed(2);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–∫–∏
    elements.beatCover.innerHTML = beat.cover ? 
        `<img src="${beat.cover}" alt="${beat.title}">` : 
        '<div class="default-cover">üéµ</div>';
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ
    elements.audioPlayer.src = beat.audio;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    updateFavoriteButton();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
    updatePurchaseButton();
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    elements.playerModal.classList.add('active');
    
    // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –±–∏—Ç –∫—É–ø–ª–µ–Ω)
    if (state.purchases.includes(beat.id)) {
        elements.audioPlayer.play().catch(e => console.log('Autoplay prevented:', e));
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞
function closePlayer() {
    elements.audioPlayer.pause();
    elements.playerModal.classList.remove('active');
    state.currentBeat = null;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function togglePlayPause() {
    if (state.isPlaying) {
        elements.audioPlayer.pause();
    } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫—É–ø–ª–µ–Ω –ª–∏ –±–∏—Ç
        if (state.currentBeat && !state.purchases.includes(state.currentBeat.id)) {
            tg.showPopup({
                title: '–ë–∏—Ç –Ω–µ –∫—É–ø–ª–µ–Ω',
                message: '–ß—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å —ç—Ç–æ—Ç –±–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.',
                buttons: [{
                    id: 'buy',
                    type: 'default',
                    text: '–ö—É–ø–∏—Ç—å'
                }, {
                    id: 'cancel',
                    type: 'cancel',
                    text: '–û—Ç–º–µ–Ω–∞'
                }]
            }, (buttonId) => {
                if (buttonId === 'buy') {
                    purchaseBeat();
                }
            });
            return;
        }
        
        elements.audioPlayer.play().catch(e => console.log('Play error:', e));
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function updatePlayPauseButton() {
    elements.playPauseBtn.innerHTML = state.isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function updateProgressBar() {
    const currentTime = elements.audioPlayer.currentTime;
    const duration = elements.audioPlayer.duration || state.currentBeat?.duration || 0;
    
    elements.progressBar.max = duration;
    elements.progressBar.value = currentTime;
    
    elements.currentTime.textContent = formatTime(currentTime);
    elements.duration.textContent = formatTime(duration);
}

// –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –∞—É–¥–∏–æ
function seekAudio() {
    elements.audioPlayer.currentTime = elements.progressBar.value;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
function updateFavoriteButton() {
    if (!state.currentBeat) return;
    
    const isFavorite = state.favorites.includes(state.currentBeat.id);
    elements.favoriteBtn.innerHTML = isFavorite ? 
        '<i class="icon-heart"></i> –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : 
        '<i class="icon-heart"></i> –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    elements.favoriteBtn.classList.toggle('active', isFavorite);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
function toggleFavorite() {
    if (!state.currentBeat) return;
    
    const index = state.favorites.indexOf(state.currentBeat.id);
    if (index === -1) {
        state.favorites.push(state.currentBeat.id);
    } else {
        state.favorites.splice(index, 1);
    }
    
    updateFavoriteButton();
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
function updatePurchaseButton() {
    if (!state.currentBeat) return;
    
    const isPurchased = state.purchases.includes(state.currentBeat.id);
    elements.buyBtn.style.display = isPurchased ? 'none' : 'flex';
}

// –ü–æ–∫—É–ø–∫–∞ –±–∏—Ç–∞
function purchaseBeat() {
    if (!state.currentBeat) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (state.balance < state.currentBeat.price) {
        tg.showPopup({
            title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
            message: `–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –±–∏—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${state.currentBeat.price.toFixed(2)} TON`,
            buttons: [{
                id: 'topup',
                type: 'default',
                text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
            }, {
                id: 'cancel',
                type: 'cancel',
                text: '–û—Ç–º–µ–Ω–∞'
            }]
        }, (buttonId) => {
            if (buttonId === 'topup') {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–∫—Ä—ã–≤–∞–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                tg.showAlert('–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º');
            }
        });
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    tg.showPopup({
        title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',
        message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –±–∏—Ç "${state.currentBeat.title}" –∑–∞ ${state.currentBeat.price.toFixed(2)} TON?`,
        buttons: [{
            id: 'confirm',
            type: 'destructive',
            text: '–ö—É–ø–∏—Ç—å'
        }, {
            id: 'cancel',
            type: 'cancel',
            text: '–û—Ç–º–µ–Ω–∞'
        }]
    }, async (buttonId) => {
        if (buttonId === 'confirm') {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —á–µ—Ä–µ–∑ TON
            try {
                // –ò–º–∏—Ç–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
                await simulatePayment(state.currentBeat.price);
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                state.purchases.push(state.currentBeat.id);
                state.balance -= state.currentBeat.price;
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                updateUI();
                updatePurchaseButton();
                
                tg.showAlert('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª—É—à–∞—Ç—å —ç—Ç–æ—Ç –±–∏—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.');
            } catch (error) {
                tg.showAlert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
            }
        }
    });
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TON Payments)
function simulatePayment(amount) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            // 10% chance of failure for demo purposes
            if (Math.random() < 0.1) {
                reject(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
            } else {
                resolve();
            }
        }, 1000);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∏—Ç–∞
function uploadNewBeat() {
    const title = elements.beatTitle.value.trim();
    const genre = elements.beatGenre.value;
    const bpm = parseInt(elements.beatBpm.value);
    const price = parseFloat(elements.beatPrice.value);
    const file = elements.beatFile.files[0];
    
    if (!title || !genre || isNaN(bpm) || isNaN(price) || !file) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä/IPFS
    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∏—Ç
    
    const newBeat = {
        id: Date.now().toString(),
        title,
        genre,
        bpm,
        price,
        cover: null, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ–±–ª–æ–∂–∫—É
        audio: URL.createObjectURL(file),
        artist: tg.initDataUnsafe.user?.username || 'You',
        duration: 180, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        uploadDate: new Date().toISOString().split('T')[0],
        sales: 0,
        earned: 0
    };
    
    state.myBeats.unshift(newBeat);
    elements.uploadModal.classList.remove('active');
    elements.uploadForm.reset();
    updateUI();
    
    tg.showAlert('–ë–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–∞
function getGenreName(genreKey) {
    const genres = {
        'trap': 'Trap',
        'drill': 'Drill',
        'rnb': 'R&B',
        'hiphop': 'Hip-Hop',
        'other': '–î—Ä—É–≥–æ–µ'
    };
    return genres[genreKey] || genreKey;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', init);